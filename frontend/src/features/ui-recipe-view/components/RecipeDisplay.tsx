/**
 * RecipeDisplay.tsx - „É¨„Ç∑„ÉîË°®Á§∫„É°„Ç§„É≥„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 * 
 * „ÄêÁõÆÁöÑ„Äë
 * AI„Å´„Çà„Å£„Å¶ÁîüÊàê„Åï„Çå„Åü„É¨„Ç∑„Éî„ÇíÁæé„Åó„ÅèË°®Á§∫„Åó„Åæ„Åô„ÄÇ
 * „Çø„Ç§„Éà„É´„ÄÅË™¨Êòé„ÄÅÈ£üÊùê„ÄÅÊâãÈ†Ü„ÇíË¶ã„ÇÑ„Åô„Åè„É¨„Ç§„Ç¢„Ç¶„Éà„Åó„ÄÅ
 * „É¶„Éº„Ç∂„Éº„Åå„É¨„Ç∑„Éî„ÇíÁ∞°Âçò„Å´ÁêÜËß£„ÉªÂÆüË°å„Åß„Åç„ÇãUI„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ
 * 
 * „ÄêÊ©üËÉΩ„Äë
 * - „É¨„Ç∑„Éî„Çø„Ç§„Éà„É´„Å®Ë™¨Êòé„ÅÆË°®Á§∫
 * - È£üÊùê„É™„Çπ„Éà„ÅÆÊï¥ÁêÜË°®Á§∫
 * - „Çπ„ÉÜ„ÉÉ„Éó„Éê„Ç§„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÊâãÈ†ÜË°®Á§∫
 * - Ë™øÁêÜÊôÇÈñì„Éª‰∫∫Êï∞ÂàÜ„ÅÆË°®Á§∫
 * - „ÅäÊ∞ó„Å´ÂÖ•„ÇäÁôªÈå≤Ê©üËÉΩ
 */

'use client';

import { useState, useCallback } from 'react';
import { Clock, Users, Heart, Share2, ChefHat } from 'lucide-react';
import Button from '@/components/ui/Button';
import { Recipe, RecipeWithMetadata } from '@/types/api';

// ===================================================================
// ÂûãÂÆöÁæ©
// ===================================================================

/**
 * RecipeDisplay„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£
 */
export interface RecipeDisplayProps {
  /** Ë°®Á§∫„Åô„Çã„É¨„Ç∑„Éî„Éá„Éº„Çø */
  recipe: RecipeWithMetadata;
  /** „ÅäÊ∞ó„Å´ÂÖ•„ÇäÁä∂ÊÖãÂ§âÊõ¥ÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ */
  onFavoriteToggle?: (recipeId: string, isFavorite: boolean) => void;
  /** „Ç∑„Çß„Ç¢„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ */
  onShare?: (recipe: RecipeWithMetadata) => void;
  /** Êñ∞„Åó„ÅÑ„É¨„Ç∑„Éî„Çí‰Ωú„Çã„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ */
  onCreateNew?: () => void;
  /** „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã */
  isLoading?: boolean;
  /** „Ç´„Çπ„Çø„É†„ÇØ„É©„Çπ */
  className?: string;
}

// ===================================================================
// „É°„Ç§„É≥„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
// ===================================================================

/**
 * „É¨„Ç∑„ÉîË°®Á§∫„É°„Ç§„É≥„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 * 
 * ÁîüÊàê„Åï„Çå„Åü„É¨„Ç∑„Éî„ÇíË¶ã„ÇÑ„Åô„ÅèË°®Á§∫„Åó„ÄÅ„É¶„Éº„Ç∂„Éº„ÅåÊñôÁêÜ„Çí‰Ωú„Çä„ÇÑ„Åô„ÅÑ„Çà„ÅÜ
 * ÊÉÖÂ†±„ÇíÊï¥ÁêÜ„Åó„Å¶Êèê‰æõ„Åó„Åæ„Åô„ÄÇ
 */
export default function RecipeDisplay({
  recipe,
  onFavoriteToggle,
  onShare,
  onCreateNew,
  isLoading = false,
  className,
}: RecipeDisplayProps) {
  
  // ===================================================================
  // Áä∂ÊÖãÁÆ°ÁêÜ
  // ===================================================================
  
  /** „ÅäÊ∞ó„Å´ÂÖ•„ÇäÁä∂ÊÖãÔºà„É≠„Éº„Ç´„É´ÁÆ°ÁêÜÔºâ */
  const [isFavorite, setIsFavorite] = useState(recipe.isFavorite || false);
  
  // ===================================================================
  // „Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº
  // ===================================================================
  
  /**
   * „ÅäÊ∞ó„Å´ÂÖ•„ÇäÁä∂ÊÖãÂàá„ÇäÊõø„ÅàÂá¶ÁêÜ
   */
  const handleFavoriteToggle = useCallback(() => {
    const newFavoriteState = !isFavorite;
    setIsFavorite(newFavoriteState);
    
    if (onFavoriteToggle && recipe.id) {
      onFavoriteToggle(recipe.id, newFavoriteState);
    }
  }, [isFavorite, onFavoriteToggle, recipe.id]);
  
  /**
   * „Ç∑„Çß„Ç¢„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÂá¶ÁêÜ
   */
  const handleShare = useCallback(() => {
    if (onShare) {
      onShare(recipe);
    }
  }, [onShare, recipe]);
  
  // „É≠„Éº„Éá„Ç£„É≥„Ç∞‰∏≠„ÅÆË°®Á§∫
  if (isLoading) {
    return (
      <div className={`bg-white rounded-3xl shadow-xl p-8 ${className}`}>
        <div className="animate-pulse space-y-6">
          <div className="h-8 bg-gray-200 rounded-xl"></div>
          <div className="h-4 bg-gray-200 rounded-lg w-3/4"></div>
          <div className="space-y-2">
            <div className="h-4 bg-gray-200 rounded-lg"></div>
            <div className="h-4 bg-gray-200 rounded-lg w-2/3"></div>
          </div>
        </div>
      </div>
    );
  }
  
  // ===================================================================
  // „É¨„É≥„ÉÄ„É™„É≥„Ç∞
  // ===================================================================
  
  return (
    <div className={`bg-white rounded-3xl shadow-xl overflow-hidden ${className}`}>
      
      {/* ===== „Éò„ÉÉ„ÉÄ„ÉºÈÉ®ÂàÜ ===== */}
      <div className="bg-gradient-to-r from-orange-500 to-red-500 p-8 text-white">
        <div className="flex items-start justify-between mb-4">
          
          {/* „Çø„Ç§„Éà„É´„Å®„Ç¢„Ç§„Ç≥„É≥ */}
          <div className="flex items-center space-x-3">
            <div className="bg-white/20 p-3 rounded-2xl">
              <ChefHat className="w-8 h-8" />
            </div>
            <div>
              <h1 className="text-3xl font-bold mb-2 leading-tight">
                {recipe.title}
              </h1>
              <p className="text-orange-100 text-lg">
                {recipe.description}
              </p>
            </div>
          </div>
          
          {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
          <div className="flex space-x-2">
            <button
              onClick={handleFavoriteToggle}
              className={`
                p-3 rounded-full transition-all duration-200
                ${isFavorite 
                  ? 'bg-white text-red-500 shadow-lg' 
                  : 'bg-white/20 text-white hover:bg-white/30'
                }
              `}
              title={isFavorite ? '„ÅäÊ∞ó„Å´ÂÖ•„Çä„Åã„ÇâÂâäÈô§' : '„ÅäÊ∞ó„Å´ÂÖ•„Çä„Å´ËøΩÂä†'}
            >
              <Heart className={`w-6 h-6 ${isFavorite ? 'fill-current' : ''}`} />
            </button>
            
            {onShare && (
              <button
                onClick={handleShare}
                className="p-3 rounded-full bg-white/20 text-white hover:bg-white/30 transition-all duration-200"
                title="„É¨„Ç∑„Éî„ÇíÂÖ±Êúâ"
              >
                <Share2 className="w-6 h-6" />
              </button>
            )}
          </div>
          
        </div>
        
        {/* „É°„ÇøÊÉÖÂ†± */}
        <div className="flex items-center space-x-6 text-orange-100">
          {recipe.cookingTime && (
            <div className="flex items-center space-x-2">
              <Clock className="w-5 h-5" />
              <span className="font-medium">{recipe.cookingTime}ÂàÜ</span>
            </div>
          )}
          
          {recipe.servings && (
            <div className="flex items-center space-x-2">
              <Users className="w-5 h-5" />
              <span className="font-medium">{recipe.servings}‰∫∫ÂàÜ</span>
            </div>
          )}
          
          {recipe.createdAt && (
            <div className="text-sm">
              ‰ΩúÊàêÊó•: {new Date(recipe.createdAt).toLocaleDateString('ja-JP')}
            </div>
          )}
        </div>
      </div>
      
      {/* ===== „Ç≥„É≥„ÉÜ„É≥„ÉÑÈÉ®ÂàÜ ===== */}
      <div className="p-8 space-y-8">
        
        {/* ===== ÊùêÊñô„Çª„ÇØ„Ç∑„Éß„É≥ ===== */}
        <section>
          <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
            <span className="w-3 h-8 bg-orange-500 rounded-full mr-3"></span>
            ÊùêÊñô {recipe.servings && `Ôºà${recipe.servings}‰∫∫ÂàÜÔºâ`}
          </h2>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {recipe.ingredients.map((ingredient, index) => (
              <div
                key={index}
                className="flex items-center p-4 bg-gray-50 rounded-xl border border-gray-200 hover:border-orange-300 hover:bg-orange-50 transition-all duration-200"
              >
                <div className="w-3 h-3 bg-orange-400 rounded-full mr-3"></div>
                <span className="text-gray-800 font-medium">
                  {ingredient}
                </span>
              </div>
            ))}
          </div>
        </section>
        
        {/* ===== ‰Ωú„ÇäÊñπ„Çª„ÇØ„Ç∑„Éß„É≥ ===== */}
        <section>
          <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
            <span className="w-3 h-8 bg-blue-500 rounded-full mr-3"></span>
            ‰Ωú„ÇäÊñπ
          </h2>
          
          <div className="space-y-6">
            {recipe.instructions.map((instruction, index) => (
              <div
                key={index}
                className="flex items-start p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200 hover:shadow-md transition-all duration-200"
              >
                <div className="flex-shrink-0 w-10 h-10 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold mr-4">
                  {index + 1}
                </div>
                <div className="flex-1">
                  <p className="text-gray-800 leading-relaxed text-lg">
                    {instruction}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </section>
        
      </div>
      
      {/* ===== „Éï„ÉÉ„Çø„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥ ===== */}
      <div className="bg-gray-50 px-8 py-6 border-t border-gray-200">
        <div className="flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0">
          
          {/* ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏ */}
          <div className="text-center sm:text-left">
            <p className="text-green-600 font-medium text-lg">
              üéâ „É¨„Ç∑„Éî„ÅåÂÆåÊàê„Åó„Åæ„Åó„ÅüÔºÅ
            </p>
            <p className="text-gray-600 text-sm">
              Á¥†Êïµ„Å™ÊñôÁêÜ„Çí„ÅäÊ•Ω„Åó„Åø„Åè„Å†„Åï„ÅÑ
            </p>
          </div>
          
          {/* Êñ∞„Åó„ÅÑ„É¨„Ç∑„Éî„Éú„Çø„É≥ */}
          {onCreateNew && (
            <Button
              onClick={onCreateNew}
              variant="primary"
              leftIcon={<ChefHat className="w-5 h-5" />}
              className="shadow-lg"
            >
              Êñ∞„Åó„ÅÑ„É¨„Ç∑„Éî„Çí‰Ωú„Çã
            </Button>
          )}
          
        </div>
      </div>
      
    </div>
  );
}